---
name: Cleanup
on:
  schedule:
    # run every day
    - cron: "0 0 * * *"

jobs:
  clean:
    name: Clean stale packages and caches
    timeout-minutes: 5

    strategy:
      matrix:
        go-version: [1.14.x]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    env:
      GOFLAGS: -v -mod=readonly

    steps:
      - name: Set up Go ${{ matrix.go-version }}
        uses: percona-platform/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check out code into the Go module directory
        uses: percona-platform/checkout@v2

      - name: Enable Go modules cache
        uses: percona-platform/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-

      - name: Enable Go build cache
        uses: percona-platform/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-

      - name: Setup environment variables
        run: |
          echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
          echo ::set-env name=REPOSITORY_OWNER::${{ github.repository_owner }}

      - name: Collect stale package versions
        id: collect
        env:
          ROBOT_TOKEN: ${{ secrets.ROBOT_TOKEN }}
        run: |
          versions=$(go run -modfile=tools/go.mod .github/workflows/get-stale-packages.go)
          length=$(echo $versions | wc -w)
          echo ::set-output name=stale_versions::${versions}
          echo ::set-output name=length::${length}

      - name: Clean stale packages
        if: steps.collect.outputs.length > 0
        uses: percona-platform/delete-package-versions@v1
        with:
          package-version-ids: ${{ steps.collect.outputs.stale_versions }}

      - name: Clean Go modules cache
        run: go clean -modcache
