syntax = "proto3";

package percona.platform.dbaas.controller.v1beta1;

option go_package = "controller;controllerv1beta1";

import "controller/common.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// XtraDBClusterState represents XtraDB cluster CR state.
enum XtraDBClusterState {
  // XTRA_DB_CLUSTER_STATE_INVALID represents unknown state.
  XTRA_DB_CLUSTER_STATE_INVALID = 0;
  // XTRA_DB_CLUSTER_STATE_CHANGING represents a cluster being changed (initializing).
  XTRA_DB_CLUSTER_STATE_CHANGING = 1;
  // XTRA_DB_CLUSTER_STATE_READY represents a cluster without pending changes (ready).
  XTRA_DB_CLUSTER_STATE_READY = 2;
  // XTRA_DB_CLUSTER_STATE_FAILED represents a failed cluster (error).
  XTRA_DB_CLUSTER_STATE_FAILED = 3;
  // XTRA_DB_CLUSTER_STATE_DELETING represents a cluster being deleting.
  XTRA_DB_CLUSTER_STATE_DELETING = 4;
}

// XtraDBBackupState represents XtraDB backup CR state.
enum XtraDBBackupState {
  // XTRA_DB_BACKUP_STATE_INVALID represents unknown state.
  XTRA_DB_BACKUP_STATE_INVALID = 0;
  // XTRA_DB_BACKUP_STATE_RUNNING represents running backup (Starting, Running, FIXME check it).
  XTRA_DB_BACKUP_STATE_RUNNING = 1;
  // XTRA_DB_BACKUP_STATE_SUCCEEDED represents succeeded backup (Succeeded, FIXME check it).
  XTRA_DB_BACKUP_STATE_SUCCEEDED = 2;
  // XTRA_DB_BACKUP_STATE_FAILED represents failed backup (Failed, FIXME check it).
  XTRA_DB_BACKUP_STATE_FAILED = 3;
}

// TODO XtraDBRestoreState

// XtraDBClusterParams represents XtraDB cluster parameters that can be updated.
message XtraDBClusterParams {
  // PXC container parameters.
  message PXC {
    // Requested compute resources.
    ComputeResources compute_resources = 1 [
      (validator.field) = {
        msg_exists: true
      }
    ];
    // Disk size in bytes.
    int64 disk_size = 2 [
      (validator.field) = {
        int_gt: 0
      }
    ];
  }
  // ProxySQL container parameters.
  message ProxySQL {
    // Requested compute resources.
    ComputeResources compute_resources = 1 [
      (validator.field) = {
        msg_exists: true
      }
    ];
    // Disk size in bytes.
    int64 disk_size = 2 [
      (validator.field) = {
        int_gt: 0
      }
    ];
  }
  // Cluster size.
  int32 cluster_size = 1 [
    (validator.field) = {
      int_gt: 0
    }
  ];
  // PXC container parameters.
  PXC pxc = 2 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // ProxySQL container parameters.
  ProxySQL proxysql = 3 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // Paused is true when cluster is suspended.
  bool paused = 4;
}
